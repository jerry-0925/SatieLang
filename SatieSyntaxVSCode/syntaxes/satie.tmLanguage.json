{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Satie",
    "scopeName": "source.sat",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#statements"
        },
        {
            "include": "#groups"
        },
        {
            "include": "#properties"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [{
                "name": "comment.line.number-sign.satie",
                "match": "#.*$"
            }]
        },
        "statements": {
            "patterns": [
                {
                    "name": "meta.statement.loop.satie",
                    "begin": "^\\s*(loop)\\s+(\"[^\"]*\")\\s*(?:(every)\\s+([0-9]+\\.?[0-9]*(?:\\.\\.[0-9]+\\.?[0-9]*)?))?(:)",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.statement.loop.satie" },
                        "2": { "name": "string.quoted.double.satie" },
                        "3": { "name": "keyword.control.timing.satie" },
                        "4": { "name": "constant.numeric.satie" },
                        "5": { "name": "punctuation.separator.colon.satie" }
                    },
                    "end": "(?=notpossiblelookahead)",
                    "patterns": [
                        { "include": "#properties" }
                    ]
                },
                {
                    "name": "meta.statement.oneshot.satie",
                    "begin": "^\\s*(oneshot)\\s+(\"[^\"]*\")\\s*(?:(every)\\s+([0-9]+\\.?[0-9]*(?:\\.\\.[0-9]+\\.?[0-9]*)?))?(:)",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.statement.oneshot.satie" },
                        "2": { "name": "string.quoted.double.satie" },
                        "3": { "name": "keyword.control.timing.satie" },
                        "4": { "name": "constant.numeric.satie" },
                        "5": { "name": "punctuation.separator.colon.satie" }
                    },
                    "end": "(?=notpossiblelookahead)",
                    "patterns": [
                        { "include": "#properties" }
                    ]
                }
            ]
        },
        "groups": {
            "patterns": [
                {
                    "name": "meta.group.satie",
                    "begin": "^\\s*(group)\\s*(:)",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.group.satie" },
                        "2": { "name": "punctuation.separator.colon.satie" }
                    },
                    "end": "(?=^\\s*endgroup)",
                    "patterns": [
                        { "include": "#comments" },
                        { "include": "#properties"},
                        { "include": "#statements" }
                    ]
                },
                {
                    "name": "keyword.control.group.satie",
                    "match": "^\\s*(endgroup)"
                }
            ]
        },
        "properties": {
            "patterns": [
                {
                    "name": "meta.property.satie",
                    "match": "^\\s*(volume|pitch|starts_at|duration|fade_in|fade_out|every|overlap|visualize|move)\\s*(=)\\s*(.+?)(?:\\s*#.*)?$",
                    "captures": {
                        "1": { "name": "variable.parameter.satie" },
                        "2": { "name": "keyword.operator.assignment.satie" },
                        "3": {
                            "patterns": [
                                { "include": "#property_values" }
                            ]
                        }
                    }
                }
            ]
        },
        "property_values": {
            "patterns": [
                {
                    "name": "constant.language.boolean.satie",
                    "match": "\\b(true|false|t|f)\\b"
                },
                {
                    "name": "string.unquoted.satie",
                    "match": "\\b(walk|fly|pos)(?=[\\s,])"
                },
                {
                    "name": "constant.numeric.range.satie",
                    "match": "\\b[0-9]+\\.?[0-9]*\\.\\.[0-9]+\\.?[0-9]*\\b"
                },
                {
                    "name": "constant.numeric.satie",
                    "match": "\\b[0-9]+\\.?[0-9]*\\b"
                },
                {
                    "name": "punctuation.separator.comma.satie",
                    "match": ","
                }
            ]
        }
    }
}